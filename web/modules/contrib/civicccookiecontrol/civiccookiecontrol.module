<?php

/**
 * @file
 * Implements the display of the Cookie Control pop-up dialog.
 *
 * Module developed by Civic UK www.civicuk.com.
 * JavaScript developed by Civic UK www.civicuk.com.
 */

use Drupal\civiccookiecontrol\Access\CookieControlAccess;
use Drupal\civiccookiecontrol\CCCConfigNames;
use Drupal\civiccookiecontrol\CCCConfig\CCCConfigFactory;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Config\FileStorage;

/**
 * Implements hook_help().
 */
function civiccookiecontrol_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.civiccookiecontrol':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= "<p> With an elegant  user-interface that doesn't hurt the look and feel of your site, Cookie Control is a mechanism for controlling user consent for the use of cookies on their computer.</p>"
                . "<p> For more information, please visit Civic's Cookie Control pages" . ' at: <a href="http://www.civicuk.com/cookie-law/index" title="Cookie Control by Civic" target="_blank">http://www.civicuk.com/cookie-law/index</a></p>'
                . '<a class="civic" href="http://www.civicuk.com/cookie-law/pricing" target="_blank">Get Your API Key</a><p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function civiccookiecontrol_theme() {
  return [
    'page__admin__config__system__cookiecontrol' => [
      'render element' => 'form',
      'template' => 'page--admin--config--system--cookiecontrol',
    ],
    'page__admin__config__cookiecontrol__system__necessarycookie' => [
      'render element' => 'page',
      'template' => 'page--admin--config--cookiecontrol--system--necessarycookie',
    ],
    'page__admin__config__system__cookiecontrol__cookiecategory' => [
      'render element' => 'page',
      'template' => 'page--admin--config--system--cookiecontrol--cookiecategory',
    ],
    'page__admin__config__system__cookiecontrol__excludedcountry' => [
      'render element' => 'page',
      'template' => 'page--admin--config--system--cookiecontrol--excludedcountry',
    ],
    'page__admin__config__system__cookiecontrol__altlanguage' => [
      'render element' => 'page',
      'template' => 'page--admin--config--system--cookiecontrol--altlanguage',
    ],
  ];
}

/**
 * Implements hook_link_alter().
 */
function civiccookiecontrol_link_alter(&$variables) {

  if (array_key_exists('data-drupal-link-system-path', $variables['options']['attributes']) &&
        (strpos($variables['options']['attributes']['data-drupal-link-system-path'], 'admin/config/system/cookiecontrol/cookiecategory/add') !== FALSE ||
        strpos($variables['options']['attributes']['data-drupal-link-system-path'], 'admin/config/system/cookiecontrol/necessarycookie/add') !== FALSE ||
        strpos($variables['options']['attributes']['data-drupal-link-system-path'], 'admin/config/system/cookiecontrol/excludedcountry/add') !== FALSE ||
        strpos($variables['options']['attributes']['data-drupal-link-system-path'], 'admin/config/system/cookiecontrol/altlanguage/add') !== FALSE)
    ) {
    $variables['options']['attributes']['class'][] = 'use-ajax';
    // off_canvas could be used as an alternative.
    $variables['options']['attributes']['data-dialog-type'][] = 'dialog';
    $variables['options']['attributes']['data-dialog-options'][] = Json::encode(['width' => 700]);
  }
}

/**
 * Implements hook_page_attachments().
 */
function civiccookiecontrol_page_attachments(array &$page) {
  $cccConfig = \Drupal::config(CCCConfigNames::COOKIECONTROL);

  if ((\Drupal::config(CCCConfigNames::IAB)->get('iabCMP') == TRUE) || (\Drupal::config(CCCConfigNames::IAB)->get('iabCMP') == TRUE)) {
    $page['#attached']['library'][] = 'civiccookiecontrol/civiccookiecontrol' . $cccConfig->get('civiccookiecontrol_api_key_version') . '.header';
  }
  else {
    $page['#attached']['library'][] = 'civiccookiecontrol/civiccookiecontrol' . $cccConfig->get('civiccookiecontrol_api_key_version');
  }
  $page['#attached']['library'][] = 'civiccookiecontrol/civiccookiecontrol.settings';
  // don't render on admin pages or excluded paths.
  $route = \Drupal::routeMatch()->getRouteObject();
  if (\Drupal::service('path.matcher')->matchPath($route->getPath(), '/admin/config/system/cookiecontrol*')) {
    $page['#attached']['library'][] = 'civiccookiecontrol/civiccookiecontrol.admin_css';
  }
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  $page['#attached']['drupalSettings']['path'] = [
    'civiccookiecontrol_path' => drupal_get_path('module', 'civiccookiecontrol'),
  ];
  if (!$is_admin || $cccConfig->get('civiccookiecontrol_drupal_admin')) {
    $page['#attached']['drupalSettings']['civiccookiecontrol'] = CCCConfigFactory::getCccConfig($cccConfig->get('civiccookiecontrol_api_key_version'))->getCccConfigJson();
  }
}

/**
 * Function to check if cookie categories are defined.
 */
function civiccookiecontrol_check_cookie_categories() {
  $cookieCategories = \Drupal::entityTypeManager()
    ->getStorage('cookiecategory')
    ->loadMultiple();

  if (empty($cookieCategories) && (CookieControlAccess::checkApiKey())) {
    $cookieCategoriesUrl = Link::createFromRoute(
      t("Cookie Category"),
      'entity.cookiecategory.collection', [], ['absolute' => TRUE]
    );

    $messenger = \Drupal::messenger();
    $messenger->deleteAll();
    $messenger->addMessage(
      t('You need to add at least <b>one</b> @ccurl for the Cookie Control module to properly operate.',
        ['@ccurl' => $cookieCategoriesUrl->toString()]),
      $messenger::TYPE_ERROR);
  }
}

/**
 * Check if local mode is set to drupal and language module is enabled.
 */
function civiccookiecontrol_check_local_mode() {

  $cccConfigLocaleMode = \Drupal::config(CCCConfigNames::COOKIECONTROL)->get('civiccookiecontrol_locale_mode');
  $moduleLanguageExist = \Drupal::moduleHandler()->moduleExists('language');

  if ($cccConfigLocaleMode == 'drupal' && !$moduleLanguageExist) {
    $extendsUrl = Link::createFromRoute(
      t("extend page"),
      'system.modules_list', [], ['absolute' => TRUE]
    );
    $messenger = \Drupal::messenger();
    $messenger->addMessage(
      t('You need to enable <b>Language</b> module via @extendsUrl, in order to use Drupal`s current language as Locale for Cookie Control widget.',
        ['@extendsUrl' => $extendsUrl->toString()]),
      $messenger::TYPE_ERROR);
  }
}

/**
 * Function to check if a configuration element is empty.
 *
 * @param array $configElement
 *   The configuration element to check.
 *
 * @return array
 *   Return true if configuration element is empty.
 */
function civiccookiecontrol_check_if_empty(array $configElement) {
  if (is_array($configElement) && !empty($configElement)) {
    return $configElement;
  }

  if ($configElement != "" || !empty($configElement)) {
    return $configElement;
  }
}

/**
 * Function to add logo in a preprocess function.
 *
 * @param array $variables
 *   The array of variables via preprocess.
 */
function civiccookiecontrol_set_ccclogo(array &$variables) {
  global $base_url;
  $variables['ccc_logo'] = $base_url . '/' . drupal_get_path('module', 'civiccookiecontrol') . '/images/CookieControlCivic.png';
}

/**
 * Implements hook_preprocess().
 */
function civiccookiecontrol_preprocess_page__admin__config__system__cookiecontrol(&$variables) {
  civiccookiecontrol_set_ccclogo($variables);
  if (CookieControlAccess::checkApiKey()) {
    $variables['ccc_messages'] = t('Cookie Control will load with its own preset styling and text configuration. You can customize your widget initial state, position, theme and text with the following options.');
  }
  else {
    $variables['ccc_messages'] = t('Please provide a valid Cookie Control API key to proceed.');
  }
}

/**
 * Implements hook_preprocess().
 */
function civiccookiecontrol_preprocess_page__admin__config__cookiecontrol__system__necessarycookie(&$variables) {
  civiccookiecontrol_set_ccclogo($variables);
}

/**
 * Implements hook_preprocess().
 */
function civiccookiecontrol_preprocess_page__admin__config__system__cookiecontrol__cookiecategory(&$variables) {
  civiccookiecontrol_set_ccclogo($variables);
}

/**
 * Implements hook_preprocess().
 */
function civiccookiecontrol_preprocess_page__admin__config__system__cookiecontrol__excludedcountry(&$variables) {
  civiccookiecontrol_set_ccclogo($variables);
}

/**
 * Implements hook_preprocess().
 */
function civiccookiecontrol_preprocess_page__admin__config__system__cookiecontrol__altlanguage(&$variables) {
  civiccookiecontrol_set_ccclogo($variables);
}

/**
 * Implements hook_js_alter().
 *
 * Exclude cookie scripts from cache.
 */
function civiccookiecontrol_js_alter(array &$js) {
  foreach ($js as &$values) {
    if ((strpos($values['data'], 'https://cc.cdn.civiccomputing.com/8/cookieControl-8.x.min.js') !== FALSE) ||
       (strpos($values['data'], 'https://cc.cdn.civiccomputing.com/9/cookieControl-9.x.min.js') !== FALSE)) {
      $values['preprocess'] = 0;
      $values['cache'] = 0;
    }
  }
}

/**
 * Clear tempstore.
 */
function civiccookiecontrol_clear_tempstore() {
  $database = \Drupal::database();
  $database->delete('key_value_expire')
    ->condition('collection', 'tempstore.private.civiccookiecontrol')
    ->execute();
}

/**
 * Helper function to remove suggestion from array.
 *
 * @param array $suggestions
 *   The array of suggestions that will be modified.
 * @param string $needle
 *   Name of the suggestion that will be removed.
 */
function civiccookiecontrol_unset_suggestion(array &$suggestions, $needle) {
  if (($key = array_search($needle, $suggestions, TRUE)) !== FALSE) {
    unset($suggestions[$key]);
  }
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function civiccookiecontrol_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if (\Drupal::currentUser()->isAnonymous()) {
    civiccookiecontrol_unset_suggestion($suggestions, "page__admin__config__system__cookiecontrol");
    civiccookiecontrol_unset_suggestion($suggestions, "page__admin__config__system__cookiecontrol__cookiecategory");
    civiccookiecontrol_unset_suggestion($suggestions, "page__admin__config__cookiecontrol__system__necessarycookie");
    civiccookiecontrol_unset_suggestion($suggestions, "page__admin__config__system__cookiecontrol__excludedcountry");
    civiccookiecontrol_unset_suggestion($suggestions, "page__admin__config__system__cookiecontrol__altlanguage");
    civiccookiecontrol_unset_suggestion($suggestions, "page__admin__config__system__cookiecontrol__govuk");
  }
}

/**
 * Create custom CookieControl html format.
 */
function civiccookiecontrol_install_html_format() {
  $modulePath = \Drupal::service('extension.list.module')->getPath('civiccookiecontrol');

  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $configStorage = \Drupal::service('config.storage');

  // Get the current CKEditor version.
  $ckeditorVersion = NULL;

  if (\Drupal::moduleHandler()->moduleExists('ckeditor5')) {
    $ckeditorVersion = 'ckeditor5';
  }
  elseif (\Drupal::moduleHandler()->moduleExists('ckeditor')) {
    $ckeditorVersion = 'ckeditor';
  }

  $htmlConfigs = [];
  // If ckeditor or ckeditor5 not found.
  if (!$ckeditorVersion) {
    \Drupal::configFactory()
      ->getEditable('filter.format.cookie_control_html')
      ->delete();

    \Drupal::configFactory()
      ->getEditable('editor.editor.cookie_control_html')
      ->delete();

    $htmlConfigs['optional/noeditor'] = 'filter.format.cookie_control_html';
  }
  // If ckeditor or ckeditor5 found.
  else {
    $htmlConfigs = [
      'optional' => 'filter.format.cookie_control_html',
      'optional/' . $ckeditorVersion => 'editor.editor.cookie_control_html',
    ];
    $currentVersion = \Drupal::config('editor.editor.cookie_control_html')
      ->get('editor') ?: NULL;

    // If the changing or deleting the CKEditor,
    // we need delete the existing file.
    if ($currentVersion !== $ckeditorVersion) {
      \Drupal::configFactory()
        ->getEditable('editor.editor.cookie_control_html')
        ->delete();
    }

    // Remove no-editor format if exists.
    \Drupal::configFactory()
      ->getEditable('filter.format.cookie_control_html')
      ->delete();
  }

  foreach ($htmlConfigs as $path => $config) {
    $source = new FileStorage("$modulePath/config/$path");
    if (!$configStorage->exists($config)) {
      $configStorage->write($config, $source->read($config));
    }
  }

}

/**
 * Implements hook_modules_installed().
 */
function civiccookiecontrol_modules_installed($modules, $is_syncing) {
  civiccookiecontrol_wysiwg_editor_install_uninstall($modules, $is_syncing);
}

/**
 * Implements hook_modules_uninstalled().
 */
function civiccookiecontrol_modules_uninstalled($modules, $is_syncing) {
  civiccookiecontrol_wysiwg_editor_install_uninstall($modules, $is_syncing);
}

/**
 * Function to be executed on wysiwg editor (un)install.
 */
function civiccookiecontrol_wysiwg_editor_install_uninstall($modules, $is_syncing) {
  if ($is_syncing) {
    return;
  }

  if (in_array('ckeditor', $modules) || (in_array('ckeditor5', $modules))) {
    civiccookiecontrol_install_html_format();
    civiccookiecontrol_clear_tempstore();
  }
}
