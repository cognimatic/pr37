function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var globalWindow = require('global/window');

import { useCallback, useEffect, useGlobals, useState } from '@storybook/addons';
export var withDrupalTheme = function withDrupalTheme(StoryFn, context) {
  var _useGlobals = useGlobals(),
      _useGlobals2 = _slicedToArray(_useGlobals, 2),
      globals = _useGlobals2[0],
      updateGlobals = _useGlobals2[1];

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      hash = _useState2[0],
      setHash = _useState2[1];

  var refresh = useCallback(function () {
    globalWindow.document.location.reload();
  }, []);

  if (globals !== null && globals !== void 0 && globals.drupalTheme) {
    console.log("Rendering component using Drupal theme: ".concat(globals === null || globals === void 0 ? void 0 : globals.drupalTheme));
  }

  useEffect(function () {
    var _context$parameters = context.parameters,
        drupalTheme = _context$parameters.drupalTheme,
        supportedDrupalThemes = _context$parameters.supportedDrupalThemes;

    if (supportedDrupalThemes && !(globals !== null && globals !== void 0 && globals.supportedDrupalThemes)) {
      if (drupalTheme && !(globals !== null && globals !== void 0 && globals.drupalTheme)) {
        updateGlobals({
          drupalTheme: drupalTheme,
          supportedDrupalThemes: supportedDrupalThemes
        });
      } else {
        updateGlobals({
          supportedDrupalThemes: supportedDrupalThemes
        });
      }
    }
  }, [globals]);
  useEffect(function () {
    var sourceWrapper = globalWindow === null || globalWindow === void 0 ? void 0 : globalWindow.__whmEventSourceWrapper['/__webpack_hmr'];

    if (!sourceWrapper) {
      return;
    }

    sourceWrapper.addMessageListener(handleMessage);

    function handleMessage(event) {
      var _data, _data2;

      if (event.data == "\uD83D\uDC93") {
        return;
      }

      var data;

      try {
        data = JSON.parse(event.data);
      } catch (ex) {
        console.warn('Invalid HMR message: ' + event.data + '\n' + ex);
        return;
      }

      if (!((_data = data) !== null && _data !== void 0 && _data.hash)) {
        return;
      }

      if (hash.length === 0 || hash !== ((_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.hash)) {
        var _data3;

        setHash((_data3 = data) === null || _data3 === void 0 ? void 0 : _data3.hash);
      } else {
        // If nothing changed in the Webpack hash, it may mean changes in the
        // server components.
        refresh();
      }
    }
  }, [globals]);
  return StoryFn(undefined, undefined);
};